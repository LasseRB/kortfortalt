{"version":3,"sources":["map.js"],"names":["islands","key","assets","push","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","map","i","length","island","type","x","getRandomInt","y","xx","yy","heigth","img","Image","imgsrc","src","naturalWidth","naturalHeight","square","isMouseDown","MdX","MdY","max","Math","floor","random","beginMove","e","MouseEvent","bubbles","cancelable","view","forEach","element","offsetX","offsetY","seaBG","fillStyle","fillRect","draw","drawIsland","drawImage","addEventListener","setInterval"],"mappings":";;;;;;;;;;;;;;;AA4HA,aA5HA,IAAA,EAAA,EAAA,QAAA,wBA4HA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnHA,IAAIA,EAAU,GACd,IAAI,IAAIC,KAAOC,EAAf,QACIF,EAAQG,KAAKD,EAAOD,QAAAA,IAExB,IAAMG,EAASC,SAASC,eAAe,OACjCC,EAAMH,EAAOI,WAAW,MAC9BJ,EAAOK,MAAQC,OAAOC,WACtBP,EAAOQ,OAAS,IAKhB,IADA,IAAIC,EAAK,GACDC,EAAI,EAAGA,EAAId,EAAQe,OAAQD,IAAI,CAC/BE,IAAAA,EAAQ,CACRC,KAAK,SACLC,EAAEC,EAAaf,EAAOK,OAASK,GAAM,EAAIV,EAAOK,OAChDW,EAAED,EAAaf,EAAOQ,QAAUE,GAAK,EAAIV,EAAOQ,QAChDS,GAAG,KACHC,GAAG,KACHb,MAAM,KACNc,OAAO,KACPC,IAAK,IAAIC,MACTC,OAAQ1B,EAAQc,IAGpBE,EAAOQ,IAAIG,IAAMX,EAAOU,OACxBV,EAAOP,MAAQO,EAAOQ,IAAII,aAC1BZ,EAAOJ,OAASI,EAAOQ,IAAIK,cAC9BhB,EAAIV,KAAKa,GAGV,IAAIc,EAAQ,CACRb,KAAK,SACDC,EAAEC,EAAaf,EAAOK,QAAW,EAAIL,EAAOK,OAC5CW,EAAED,EAAaf,EAAOQ,SAAW,EAAIR,EAAOQ,QAC5CS,GAAG,KACHC,GAAG,KACHb,MAAM,IACNc,OAAO,KAGfV,EAAIV,KAAK2B,GAET,IAAIC,GAAc,EACdC,EAAM,EACNC,EAAM,EAGV,SAASd,EAAae,GACXC,OAAAA,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAIjD,SAASI,EAAUC,GACL,KAAVA,EAAEtC,MACCsC,EAAG,IAAIC,WAAW,YAAa,CAC1BC,SAAS,EACTC,YAAY,EACZC,KAAMjC,UAGdqB,GAAc,EACblB,EAAI+B,QAAQ,SAAAC,GACLC,IAAAA,EAAUP,EAAEO,QAAQD,EAAQ3B,EAC5B6B,EAAUR,EAAEQ,QAAQF,EAAQzB,EAEhCyB,EAAQxB,GAAKyB,EACbD,EAAQvB,GAAKyB,IA2BrB,SAASC,IACLzC,EAAI0C,UAAY,oBAChB1C,EAAI2C,SAAS,EAAE,EAAE9C,EAAOK,MAAM,MAGlC,SAAS0C,IAGLH,IACAI,IAIJ,SAASA,IAERvC,EAAI+B,QAAQ,SAAA5B,GACW,WAAhBA,EAAOC,MAEHV,EAAI8C,UAAUrC,EAAOQ,IAAIR,EAAOE,EAAGF,EAAOI,KA7DtDhB,EAAOkD,iBAAiB,YAAahB,GACrClC,EAAOkD,iBAAiB,UAAWhB,GAmBnClC,EAAOkD,iBAAiB,UAAW,SAAAf,GAC/BR,GAAc,IAElB3B,EAAOkD,iBAAiB,WAAY,SAAAf,GAChCR,GAAc,IAIlB3B,EAAOkD,iBAAiB,YAAa,SAAAf,GAE7BrB,IAAAA,EAAIqB,EAAEO,QACN1B,EAAImB,EAAEQ,QAEPhB,IACCoB,IACAtC,EAAI+B,QAAQ,SAAAC,GAGRA,EAAQ3B,GAAoB,GAAf2B,EAAQxB,GAAGH,GACxB2B,EAAQzB,GAAoB,GAAfyB,EAAQvB,GAAGF,QAyBpCmC,YAAY,WACRJ,KACD","file":"map.10d3ad50.js","sourceRoot":"../0_test","sourcesContent":["import assets from \"./img/islands/*.png\";\n// import path from 'path'\n// import fs from 'fs'\n// const fs = require(\"fs\")\n\n// //joining path of directory \n// const directoryPath = path.join(__dirname, '/img/islands');\n// //passsing directoryPath and callback function\n\nlet islands = [];\nfor(var key in assets){\n    islands.push(assets[key]);}\n\nconst canvas = document.getElementById('map');\nconst ctx = canvas.getContext('2d');\ncanvas.width = window.innerWidth;\ncanvas.height = 800;\n\n\n\nlet map =[];\nfor(let i = 0; i < islands.length; i++){\n    let island ={\n        type:\"island\",\n        x:getRandomInt(canvas.width) * i  % (3 * canvas.width),\n        y:getRandomInt(canvas.height) * i % (3 * canvas.height),\n        xx:null,\n        yy:null,\n        width:null,\n        heigth:null,\n        img: new Image(),\n        imgsrc: islands[i]\n        }\n        //! set fields that can be set in the object\n    island.img.src = island.imgsrc;\n    island.width = island.img.naturalWidth;\n    island.height = island.img.naturalHeight;\n map.push(island);\n}\n\nlet square ={\n    type:\"square\",\n        x:getRandomInt(canvas.width)  % (3 * canvas.width),\n        y:getRandomInt(canvas.height) % (3 * canvas.height),\n        xx:null,\n        yy:null,\n        width:100,\n        heigth:100\n}\n\nmap.push(square);\n\nlet isMouseDown = false;\nlet MdX = 0;\nlet MdY = 0;\n\n// let island = {x: 0, y: 0}; \nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\ncanvas.addEventListener(\"mousedown\", beginMove);\ncanvas.addEventListener(\"keydown\", beginMove);\nfunction beginMove(e){\n if(e.key === 32){\n       e= new MouseEvent(\"mousedown\", {\n            bubbles: true,\n            cancelable: true,\n            view: window\n          });\n        }\n    isMouseDown = true;\n     map.forEach(element =>{\n        let offsetX = e.offsetX-element.x;\n        let offsetY = e.offsetY-element.y;\n\n        element.xx = offsetX;\n        element.yy = offsetY;\n\n     })\n}\ncanvas.addEventListener(\"mouseup\", e=>{\n    isMouseDown = false;              \n});\ncanvas.addEventListener(\"mouseout\", e=>{\n    isMouseDown = false;              \n});\n\n\ncanvas.addEventListener(\"mousemove\", e=>{  \n    \n    let x = e.offsetX;\n    let y = e.offsetY;\n\n    if(isMouseDown){\n        draw();\n        map.forEach(element=> {\n            // console.debug(element.el.xx +\" \"+ element.el.yy)\n           \n            element.x = (element.xx-x)*-1;\n            element.y = (element.yy-y)*-1;\n        })\n    }\n});\nfunction seaBG(){\n    ctx.fillStyle = \"rgb(30, 181, 200)\"; \n    ctx.fillRect(0,0,canvas.width,1500);\n}\n\nfunction draw(){\n    //ctx.\n    // ctx.fillRect(0,0,canvas.width-100,1000)\n    seaBG();\n    drawIsland();\n      \n}\n\nfunction drawIsland(){\n\n map.forEach(island =>{ \n     if(island.type === \"island\"){\n          \n            ctx.drawImage(island.img,island.x, island.y);\n} });\n}\nsetInterval(function(){ \n    draw();\n}, 1);\n"]}